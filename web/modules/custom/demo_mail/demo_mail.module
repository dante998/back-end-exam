<?php

use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_mail().
 */
 function demo_mail_mail($key, &$message, $params) {
    // Set language options for the message.
    $options = array(
    'langcode' => $message['langcode'],
  );

   /** @var \Drupal\Core\Render\RendererInterface $renderer */
   $renderer = \Drupal::service('renderer');
  switch ($key) {
    // Handle single course enrollment email.
    case 'course_enrollment_single':
      // Set sender email and subject for a single course enrollment.
      $message['from'] = \Drupal::currentUser()->getEmail();
      $message['subject'] = t('NEW Enrollment');
      // Define the email template variables for a single course enrollment.
      $element = [
        '#theme' => 'email_template_theme_hook',
        '#student' => $params['student_name'],
        '#course' => $params['course_name'],
      ];
      // Render the email template and add it to the message body.
      $message['body'][] = $renderer->render($element);
      break;

      // Handle multiple course enrollments email.
      case 'course_enrollment_multiple':
        // Set sender email and subject for multiple course enrollments.
        $message['from'] = \Drupal::currentUser()->getEmail();
        $message['subject'] = t('NEW Enrollments');
        // Define the email template variables for multiple course enrollments.
        $element = [
        '#theme' => 'email_template_theme_hook_multiple',
        '#student' => $params['student_name'],
        '#courses' => $params['course_names'],
      ];
      // Render the email template and add it to the message body.
      $message['body'][] = $renderer->render($element);
      break;
    }
  }

 /**
  * Implements hook_user_presave().
  */
  function demo_mail_user_presave(EntityInterface $entity) {
    // Check if the user has selected a course.
    $selected_courses = $entity->field_course_select->referencedEntities();

    if (!empty($selected_courses)) {
      switch (count($selected_courses)) {
        case 1:
          // One course selected process.
          foreach ($selected_courses as $selected_course) {
            processCourseEnrollmentSingle($entity, $selected_course);
          } break;

        default:
          // Multiple courses selected process.
          processCourseEnrollmentMultiple($entity, $selected_courses);
          break;
       }
     }
   }

/**
 * Process single course enrollment and send email.
 */
 function processCourseEnrollmentSingle(EntityInterface $entity, $selected_course) {
  // Get the name of the selected course.
  $course_name = $selected_course->label();
  // Get the mail manager service.
  $mailManager = \Drupal::service('plugin.manager.mail');
  // Get the current timestamp for enrollment date.
  $enrollment_date = Drupal::time()->getRequestTime();
  // Set module and key for the email.
  $module = 'demo_mail';
  $key = 'course_enrollment_single';
  // Get the recipient email address.
  $to = \Drupal::config('system.site')->get('mail'); // TODO: Get emails from the CustomEmailsConfigForm
  // Prepare parameters for the email template
  $params['student_name'] = $entity->label();
  $params['course_name'] = $course_name;
  $params['enrollment_date'] = date($enrollment_date);
  // Get the language code of the current user.
  $langcode = \Drupal::currentUser()->getPreferredLangcode();

  $send = true;

  // Send the email and handle the result.
  $result = $mailManager->mail($module, $key, $to, $langcode, $params, NULL, $send);

  if ($result['result'] !== true) {
    // Log an error if email sending fails.
    \Drupal::logger('demo_mail')->error('Error sending email for course: @course_name. Details: @details', [
      '@course_name' => $course_name,
      '@details' => print_r($result, true),
    ]);
    // Display an error message to the user.
    \Drupal::messenger()->addError(t('There was a problem sending the email for course: @course_name', ['@course_name' => $course_name]));
  } else {
    // Display a success message if email sending is successful.
    \Drupal::messenger()->addMessage(t('Email for the following course: @course_name has been sent successfully.', ['@course_name' => $course_name]));
  }
}

/**
 * Process multiple course enrollments and send email.
 */
 function processCourseEnrollmentMultiple(EntityInterface $entity, $selected_courses) {
  // Obtain the mail manager service for handling email operations.
  $mailManager = \Drupal::service('plugin.manager.mail');
  // Get the current timestamp for enrollment date.
  $enrollment_date = \Drupal::time()->getRequestTime();
  // Specify the module and key for identifying the email template.
  $module = 'demo_mail';
  $key = 'course_enrollment_multiple';
  // Retrieve the recipient email address from the site configuration.
  $to = \Drupal::config('system.site')->get('mail');

  $params['student_name'] = $entity->label();
  $params['course_names'] = implode(', ', array_map(function ($course) {
    return $course->label();
  }, $selected_courses));
  $params['enrollment_date'] = date($enrollment_date);
  $langcode = \Drupal::currentUser()->getPreferredLangcode();
  $send = true;

  $result = $mailManager->mail($module, $key, $to, $langcode, $params, NULL, $send);

  if ($result['result'] !== true) {
    \Drupal::logger('demo_mail')->error('Error sending email for multiple courses. Details: @details', [
      '@details' => print_r($result, true),
    ]);
    \Drupal::messenger()->addError(t('There was a problem sending the email for multiple courses.'));
  } else {
    $course_names = implode(', ', array_map(function ($course) {
      return $course->label();
    }, $selected_courses));
    \Drupal::messenger()->addMessage(t('Email for the following courses: @course_names has been sent successfully.', ['@course_names' => $course_names]));
  }
}

/**
 * Implements hook_theme().
 */
 function demo_mail_theme($existing, $type, $theme, $path): array {
  return [
     // Define the theme for the single course enrollment email.
    'email_template_theme_hook' => [
      'template' => 'demo-mail-email-theme-hook',
      'variables' => [
        'student' => NULL,
        'course' => NULL,
      ],
    ],
    // Define the theme for the multiple course enrollments email.
    'email_template_theme_hook_multiple' => [
      'template' => 'demo-mail-email-theme-hook-multiple',
      'variables' => [
        'student' => NULL,
        'courses' => NULL,
      ],
    ],
  ];
}

