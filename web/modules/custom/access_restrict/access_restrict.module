<?php

use Drupal\node\NodeInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\user\Entity\User;
use Drupal\Core\Access\AccessResult;

// Define constants for node types and role name.
define('ARTICLE_NODE_TYPE', 'article');
define('BASIC_PAGE_NODE_TYPE', 'basic_page');
define('PARAGRAPHED_ARTICLE_NODE_TYPE', 'paragraphed_article');
define('COURSE_NODE_TYPE', 'course');
define('RESOURCE_NODE_TYPE', 'resource');
define('STUDENT_ROLE', 'student');

/**
 * Implements hook_ENTITY_TYPE_access() for both course and resource nodes.
 */
function access_restrict_node_access(NodeInterface $node, $op, AccountInterface $account) {
  // Get the roles of the user.
  $roles = $account->getRoles();
  // Check if the user does not have the "student" role or the operation is not "view".
  if (!in_array(STUDENT_ROLE, $roles) || $op !== 'view') {
    // If the user is not a student or the operation is not "view," deny access.
    return AccessResult::forbidden();
  }

  // Check if the node type is "course".
  if ($node->getType() === COURSE_NODE_TYPE) {
    // Load the user entity.
    $user = User::load($account->id());
    // Check if the user is referenced in the field_course_select.
    $enrolled_users = $user->field_course_select->referencedEntities();

    foreach ($enrolled_users as $student) {
      // Check if the user is enrolled in this specific course.
      if ($student->id() == $node->id()) {
        // The user is enrolled in this course, allow access.
        return AccessResult::allowed();
      }
    }
  }

  // Check if the node type is "resource".
  if ($node->getType() === RESOURCE_NODE_TYPE) {
    // Load the user entity.
    $user = User::load($account->id());
    // Check if the user is enrolled in any courses.
    $enrolled_courses = $user->field_course_select->referencedEntities();

    foreach ($enrolled_courses as $course) {
      // Check if the field_external_resources is available and not empty.
      if ($course->hasField('field_external_resources') && !$course->field_external_resources->isEmpty()) {
        $resources = $course->field_external_resources->referencedEntities();
        foreach ($resources as $resource) {
          if ($resource->id() == $node->id()) {
          // The user is enrolled in a course that references this resource, allow access.
          return AccessResult::allowed();
          }
        }
      }
    }
  }

 // Check if the node type is "article".
 if ($node->getType() == ARTICLE_NODE_TYPE && $op === 'view') {
  // Allow access to articles for students.
  return AccessResult::allowed();
}

// Check if the node type is "basic_page".
if ($node->getType() === BASIC_PAGE_NODE_TYPE && $op === 'view') {
  // Allow access to basic pages for students.
  return AccessResult::allowed();
}

// Check if the node type is "paragraphed_article".
if ($node->getType() === PARAGRAPHED_ARTICLE_NODE_TYPE && $op === 'view') {
  // Allow access to paragraphed articles for students.
  return AccessResult::allowed();
}

// If none of the conditions are met, deny access.
return AccessResult::forbidden();
}

